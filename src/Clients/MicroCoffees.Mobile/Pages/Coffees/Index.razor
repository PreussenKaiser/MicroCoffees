@page "/coffees"

@using MicroCoffees.Mobile.Models;
@using MicroCoffees.Mobile.Services;

@inject ICoffeeService CoffeeService

<div class="container">
    <div class="row my-3">
        <div class="col-12">
            <a href="/coffees/request" class="btn btn-lg btn-primary w-100">
                Request
            </a>
        </div>
    </div>
    <div class="row">
        @foreach (var coffee in this.coffees)
        {
            <div class="col-12">
                <div class="card border-primary border-5 rounded">
                    <div class="row">
                        <div class="col-6 d-flex justify-content-between">
                            <img style="max-width: 128px" src="@coffee.ImageUrl" />
                            <div class="card-body">
                                <h5 class="card-title fw-bold">@coffee.Name</h5>
                                <h6>Roast: @coffee.Roast</h6>
                            </div>

                        </div>
                        <div class="col-6 my-3">
                            <div class="row">
                                <div class="col-sm-4">
                                    <label class="form-label">Quantity</label>
                                    <select class="form-control" @onchange="@(async (args) => this.SelectChanged(args, coffee.Id))">
                                        @for (int i = 0; i < 8; i++)
                                        {
                                            if (i == 0)
                                            {
                                                <option value="0">@i (cancel order)</option>
                                            }
                                            else
                                            {
                                                bool selected = i == coffee.Count;

                                                <option selected="@selected" value="@i">@i</option>
                                            }
                                        }
                                    </select>
                                </div>
                                <div class="col-sm-4">
                                    <label class="form-label">Cost</label>
                                    <div class="input-group">
                                        <span class="input-group-text">$</span>
                                        <input type="number" value="@coffee.Cost" class="form-control" disabled />
                                        <span class="input-group-text">.00</span>
                                    </div>
                                </div>
                                <div class="col-sm-4">
                                    <br>
                                    <button @onclick="@(async () => await this.CancelRequest(coffee.Id))" type="button" class="btn btn-danger">
                                        Cancel
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>  
        }
    </div>
</div>

@code {
    /// <summary>
    /// The customer's requested coffees.
    /// </summary>
    private IEnumerable<Coffee> coffees = Enumerable.Empty<Coffee>();

    private async Task SelectChanged(ChangeEventArgs args, Guid id)
    {
        int qty = int.Parse(args.Value.ToString());

        if (qty == 0)
        {
            await this.CoffeeService.CancelAsync(id);

            return;
        }

        await this.CoffeeService.UpdateQuantityAsync(id, qty);
    }

    private async Task CancelRequest(Guid id)
    {
        await this.CoffeeService.CancelAsync(id);
    }

    /// <summary>
    /// Initializes the list of coffees.
    /// </summary>
    /// <returns>Whether the task was completed or not.</returns>
    protected override async Task OnInitializedAsync()
    {
        this.coffees = await this.CoffeeService.SearchAsync();
    }
}